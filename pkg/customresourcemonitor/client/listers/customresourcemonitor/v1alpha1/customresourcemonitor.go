/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "k8s.io/kube-state-metrics/v2/pkg/customresourcemonitor/apis/customresourcemonitor/v1alpha1"
)

// CustomResourceMonitorLister helps list CustomResourceMonitors.
// All objects returned here must be treated as read-only.
type CustomResourceMonitorLister interface {
	// List lists all CustomResourceMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomResourceMonitor, err error)
	// CustomResourceMonitors returns an object that can list and get CustomResourceMonitors.
	CustomResourceMonitors(namespace string) CustomResourceMonitorNamespaceLister
	CustomResourceMonitorListerExpansion
}

// customResourceMonitorLister implements the CustomResourceMonitorLister interface.
type customResourceMonitorLister struct {
	indexer cache.Indexer
}

// NewCustomResourceMonitorLister returns a new CustomResourceMonitorLister.
func NewCustomResourceMonitorLister(indexer cache.Indexer) CustomResourceMonitorLister {
	return &customResourceMonitorLister{indexer: indexer}
}

// List lists all CustomResourceMonitors in the indexer.
func (s *customResourceMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.CustomResourceMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomResourceMonitor))
	})
	return ret, err
}

// CustomResourceMonitors returns an object that can list and get CustomResourceMonitors.
func (s *customResourceMonitorLister) CustomResourceMonitors(namespace string) CustomResourceMonitorNamespaceLister {
	return customResourceMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomResourceMonitorNamespaceLister helps list and get CustomResourceMonitors.
// All objects returned here must be treated as read-only.
type CustomResourceMonitorNamespaceLister interface {
	// List lists all CustomResourceMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomResourceMonitor, err error)
	// Get retrieves the CustomResourceMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CustomResourceMonitor, error)
	CustomResourceMonitorNamespaceListerExpansion
}

// customResourceMonitorNamespaceLister implements the CustomResourceMonitorNamespaceLister
// interface.
type customResourceMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomResourceMonitors in the indexer for a given namespace.
func (s customResourceMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CustomResourceMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomResourceMonitor))
	})
	return ret, err
}

// Get retrieves the CustomResourceMonitor from the indexer for a given namespace and name.
func (s customResourceMonitorNamespaceLister) Get(name string) (*v1alpha1.CustomResourceMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("customresourcemonitor"), name)
	}
	return obj.(*v1alpha1.CustomResourceMonitor), nil
}
